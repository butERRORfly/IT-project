services:
  postgres:
    image: postgres:latest
    env_file:
      - .env
    ports:
      - "5434:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U xololibra -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    command: >
      sh -c "npm run build"
    restart: "no"

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./backend/src/adapters/entrypoints/static:/app/backend/src/adapters/entrypoints/static
      - ./frontend/static:/app/frontend/static
      - ./backend/src/adapters/entrypoints/templates:/app/backend/src/adapters/entrypoints/templates
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    command: uvicorn backend.src.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - frontend

  migrations:
    build:
      context: .
      dockerfile: backend/Dockerfile
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    command: >
      sh -c "alembic upgrade head"
    restart: on-failure

volumes:
  pgdata:
    driver: local